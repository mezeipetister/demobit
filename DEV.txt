Repository
  |
  |
  *--> Storage
          |
          |
          *--> StorageObject
                  |
                  |
                  *--> ActionObject
                          |
                          |
                          *--> T: impl ActionExt

Example usage

fn main() -> .. {
  // Repository contains all the needed repository
  // information
  let repository = Repository::init(..)?;

  // Init storage_a
  let storage_a: Storage<A,B> = Storage::init(&repository)?;

  // Init storage_b
  let storage_b: Storage<C,D> = Storage::init(&repository)?;

  // Run repository
  repository.run();

  let data = AppData(storage_a, storage_b)?;
  ...
}

impl AppData {
  pub fn demo(&self) -> .. {
    let data = self.data.lock()?;
    let res = data.storage_a.filter(|i| i.name().contains("Peti"));
    display(res)?;
    ..
  }

  pub fn demo2(&self) -> .. {
    let data = self.data.lock()?;
    let object_id = ..;
    let res = data.storage_a.patch(object_id, DemoAction::UpdateObject{age: 34})?;
    display(res)?;
    ..
  }
}

---


(Commit + Action) -> ActionObject (Local) -> StorageObject -> Storage

---

Filesystem (FS)

  - ProjectRootDb/
    - storage/
      *S repo_details (bincode file)
      *S commit_log (bincode file)
      - storage_details/
        *D IDXX (Storage ID)
        *D IDXX
        *D IDXX
      - storage_data/
        - IDXX/
          *D Object_IDXX
          *D Object_IDXX
          *D Object_IDxx


---

let repo = Repository::load()?;
let a = Storage::load("a")?.register(&repo)?;
let b = Storage::load("b")?.register(&repo)?;
let c = Storage::load("c")?.register(&repo)?;

repo.watch()?;

let data = Data {
  repo,
  a,
  b,
  c
}

fn action_a(&self) -> Result<(), String> {
  let commit = self.data.repo.commit("Example commit")?;
  self.data.a.find_one(|i| i.id == "demo_a")?.patch(ActionA::UpdateName("New name"), &commit)?;
  self.data.b.find_one(|i| i.id == "demo_b")?.patch(ActionB::UpdateAge(42), &commit)?;
  commit.apply()
}

Server Side push process
------------------------

1)  Check Commit (Ancestor commit, unsigned)
    if ok
2)  Check all ActionObject (Ancestor + Action + Signature)
    if ok
3)  Sign all ActionObjects
    if ok
4)  ReCreate Commit with signature and signed ActionObjects
    if ok
5)  Add commit is usual (it will act as adding remote commit)
    if ok (should be)
6)  Return remote Commit